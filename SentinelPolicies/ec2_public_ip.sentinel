
###########################################################
#Rule: Internet Gateway Allowed to specific AWS Account Id
###########################################################
# An internet gateway shall be set up to protect
# internet ingress and egress traffic from public users accessing the MXX.
###########################################################
import "tfplan/v2" as tfplan 
import "tfstate/v2" as tfstate

param aws_allowed_account_id default []  # [995566778899, 3064333]
# get current account id from Data source
current_aws_id=tfstate.outputs.account_id.value 

# Get all aws_instance with Public IP
ec2All = filter tfplan.resource_changes as _, rc {
    rc.type is "aws_instance" and
    rc.mode is "managed" and
    (rc.change.actions contains "create" or   rc.change.actions contains "update" or
     rc.change.actions contains "read" or rc.change.actions contains "no-op")  
}
# Get all aws_instance with Public IP
 ec2_public_ip_list = filter tfplan.resource_changes as _, rc {
    rc.type is "aws_instance" and
    rc.mode is "managed" and
    (rc.change.actions contains "create" or   rc.change.actions contains "update" or
     rc.change.actions contains "read" or rc.change.actions contains "no-op") and
    ((rc.change.after.associate_public_ip_address else null is not null and
     rc.change.after.associate_public_ip_address is true ) )
    #  or (rc.change.after_unknown.associate_public_ip_address else null is not null or
    #  rc.change.after_unknown.associate_public_ip_address is true )
    #  )
}

print("ec2All-full",ec2All)
print("ec2_public_ip_list",ec2_public_ip_list) 



 # Get all aws_instance with Public IP
eipFull = filter tfplan.resource_changes as _, rc {
    rc.type is "aws_eip_association" and
    rc.mode is "managed" and
    (rc.change.actions contains "create" or   rc.change.actions contains "update" or
     rc.change.actions contains "read" or rc.change.actions contains "no-op") 
}
print("eip-full",eipFull)
for eipFull as _, eip {
    if "instance_id" in keys(eip["change"]["after"])    {
        print(eip["change"]["after"]["instance_id"])         
    }
     if "allocation_id" in keys(eip["change"]["after"]) {
        print(eip["change"]["after"]["allocation_id"])         
    }
}

# Count violations
ec2_public_ip_violations=0

# if(int(current_aws_id)  not in  aws_allowed_account_id ){
#     if (length(ec2_public_ip_list) > 0 ) {
#         ec2_public_ip_violations +=1
#         print("Violation: Account Id - ", current_aws_id ," not allowed to create Ec2 Instance with Public IP")
#     }
#     if  (length(eip) > 0 ) {
#         ec2_public_ip_violations +=1
#         print("Violation: Account Id - ", current_aws_id ," not allowed to create Ec2 Instance with Elastic IP (Public IP)")
#     }
# }
main = rule {
    ec2_public_ip_violations <= 0 
}
