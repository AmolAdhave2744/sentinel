###########################################################
#Rule: Check Unrestricted Traffic
###########################################################
# CIS 4.1: Ensure no security groups allow ingress from 0.0.0.0/0 to port 22 and 3389.
###########################################################
import "tfplan/v2" as tfplan
forbidden_cidrs = ["0.0.0.0/0"]
allrule = filter tfplan.resource_changes as _, rc {
    rc.type is "aws_security_group_rule" and
    rc.mode is "managed" and
    (rc.change.actions contains "create" or   rc.change.actions contains "update" or
    rc.change.actions contains "read" or rc.change.actions contains "no-op") and 
    rc.change.after.type is "ingress"
    }
violatedrulecount = 0 
for allrule as ruledetails, sg {
    if "cidr_blocks" in keys(sg["change"]["after"]){
        if sg["change"]["after"]["cidr_blocks"] contains "0.0.0.0/0" and sg["change"]["after"]["from_port"] <= 22 and sg["change"]["after"]["to_port"] >= 22 {
            # print("Violaton: Port 22 Open to world detected in", sg["address"])
            violatedrulecount = violatedrulecount+1
            print("Violation:")
            print("================================")
            print("Security Group Rule:", sg["address"])
            print("CIDR: [0.0.0.0/0]")
            print("Port:") 
            print("to_port = 22 is not allowed")
            print("================================")
        }
        if sg["change"]["after"]["cidr_blocks"] contains "0.0.0.0/0" and sg["change"]["after"]["from_port"] <= 3389 and sg["change"]["after"]["to_port"] >= 3389 {
            # print("Violaton: Port 3389 Open to world detected in ", sg["address"])
            violatedrulecount = violatedrulecount+1
            print("Violation:")
            print("================================")
            print("Security Group Rule:", sg["address"])
            print("CIDR: [0.0.0.0/0]")
            print("Port:") 
            print("to_port = 3389 is not allowed")
            print("================================")
        }
    }
}

main = rule {
    violatedrulecount <= 0
}