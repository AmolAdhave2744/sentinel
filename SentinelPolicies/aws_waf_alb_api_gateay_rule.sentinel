import "tfplan/v2" as tfplan
import "tfstate/v2" as tfstate
/*
#param network_account_ID default "123456789"
#network_account_ID = "123456789"
all_lb = filter tfplan.resource_changes as _, rc {
    rc.type is "aws_alb" and
    rc.mode is "managed" and
    (rc.change.actions contains "create" or   rc.change.actions contains "update" or
    rc.change.actions contains "read" or rc.change.actions contains "no-op")
}

validate_condition = 0
for all_lb as _, lb{
	if "enable_waf_fail_open" not in keys(lb["change"]["after"]) {
        validate_condition = validate_condition + 1
        print("Violation: enable_waf_fail_open not found for - ", lb["address"])
    } else if lb["change"]["after"]["enable_waf_fail_open"] is not true {
        validate_condition = validate_condition + 1
        print("Violation: WAF is not assciated with One or more Application Load Balancers")
    }}

main = rule {
    validate_condition <= 0 
}
*/

#param network_account_ID default "123456789"
#network_account_ID = "123456789"
all_api = filter tfplan.resource_changes as _, rc {
    rc.type is "aws_api_gateway_stage" and
    rc.mode is "managed" and
    (rc.change.actions contains "create" or   rc.change.actions contains "update" or
    rc.change.actions contains "read" or rc.change.actions contains "no-op")
}

validate_condition = 0
for all_api as _, api{
    print(api) 
}

main = rule {
    validate_condition <= 0 
}