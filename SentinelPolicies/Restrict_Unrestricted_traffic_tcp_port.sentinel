###########################################################
#Rule: Check unrestricted incoming TCP traffic 
###########################################################
#Checks whether the security groups in use do not allow unrestricted incoming TCP traffic 
#to the specified ports (20, 21, 3389, 3306, 4333). This rule applies only to IPv4.
###########################################################
import "tfplan-functions" as plan
import "tfplan/v2" as tfplan

param forbidden_port default  [20, 21, 3389, 3306, 4333]   
param forbidden_cidrs default   ["0.0.0.0/0"]   
 
# Get all Security Groups
aws_security_group = filter tfplan.resource_changes as _, rc {
    rc.type is "aws_security_group" and
    rc.mode is "managed" and
    (rc.change.actions contains "create" or   rc.change.actions contains "update" or
    rc.change.actions contains "read" or rc.change.actions contains "no-op") and 
    rc.change.after contains "ingress"
}
violatingSGsCount = 0 

for aws_security_group as sgName, sg {
    # Find the ingress block of  current SG
    ingressRules = plan.find_blocks(sg, "ingress") 

    for ingressRules as ingressName, sg { 
        for forbidden_port as port {
            if sg.cidr_blocks[0] else null is not null and  sg.cidr_blocks[0] in forbidden_cidrs and
             sg.from_port <= port and sg.to_port >= port and sg.protocol is "tcp" {
                print("Violation: Unrestricted ",forbidden_cidrs," incoming TCP traffic to the specified port - ", string(port)," not allowed")
                violatingSGsCount += 1
                print("Violation:")
                print("================================")
                print("Security Group Name:", sgName)
                print("CIDR:", sg.cidr_blocks)
                print("Port:") 
                print("from_port =", string(sg.from_port))
                print("to_port =",string( sg.to_port))
                print("================================")
            }
        }
    }
}

# Get all Security Group Ingress Rules
aws_sg_rules = filter tfplan.resource_changes as address, rc {
  rc.type is "aws_security_group_rule" and
  rc.mode is "managed" and
  (rc.change.actions contains "create" or rc.change.actions contains "update" or
   rc.change.actions contains "read" or rc.change.actions contains "no-op") and
   rc.change.after.type is "ingress"
} 
violatingSGRulesCount = 0 

for aws_sg_rules as sgName, sg {
    for forbidden_port as port {
        if sg.change.after.cidr_blocks[0] else null is not null and 
        sg.change.after.cidr_blocks[0] in forbidden_cidrs and sg.change.after.from_port <= port and
        sg.change.after.to_port >= port and sg.change.after.protocol is "tcp" {
            print("Violation: Unrestricted ",forbidden_cidrs," incoming TCP traffic to the specified port - ", string(port)," not allowed")
            violatingSGRulesCount += 1
            print("Violation:")
            print("================================")
            print("Security Group Rule Name:", sgName)
            print("CIDR:", sg.change.after.cidr_blocks)
            print("Port:") 
            print("from_port =",string( sg.change.after.from_port))
            print("to_port =", string(sg.change.after.to_port))
            print("================================")
        }
    }
}
    
main = rule {
    violatingSGsCount is 0 and violatingSGRulesCount is 0
}